/* Includes */
#include "stm32f4xx.h"

#define BOTAO1 GPIO_IDR_IDR_8
#define BOTAO2 GPIO_IDR_IDR_9

#define LED1 GPIO_ODR_ODR_0;
#define LED2 GPIO_ODR_ODR_1;

enum {AGORA=0,ANTES};
enum {NOW=0,BEFORE};


                	  //PC 6 5 4 3 2 1 0
						// g f e d c b a
const uint16_t decod[16]={
		 	 	 	 	 	 	 	 0b1000000, // 0
									 0b1111001, // 1
									 0b0100100, // 2
									 0b0110000, // 3
									 0b0011001, // 4
									 0b0010010, // 5
									 0b0000010, // 6
									 0b1111000, // 7
									 0b0000000, // 8
									 0b0010000, // 9
									 0b0001000, // A
									 0b0000011, // B
									 0b1000110, // C
									 0b0100001, // D
									 0b0000110, // E
									 0b0001110, // F

};

uint16_t conta = 0;

uint16_t sensor[2];
uint16_t super_sensor[2];



int main(void)
{
	// Configuração
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN|RCC_AHB1ENR_GPIOBEN|RCC_AHB1ENR_GPIOAEN);      // Ligando clock de todos os GPIOs

		RCC->APB2ENR |= (RCC_APB2ENR_TIM10EN|RCC_APB2ENR_TIM11EN);



		TIM10->PSC=(16000);
		TIM10->ARR=(5);
		TIM10->CR1 = TIM_CR1_CEN|TIM_CR1_ARPE;

		TIM11->PSC=(16000);
		TIM11->ARR=(5);
		TIM11->CR1 = TIM_CR1_CEN|TIM_CR1_ARPE;



    	GPIOB->MODER &= ~(GPIO_MODER_MODER0|GPIO_MODER_MODER1); // Todos os pinos do GPIOB são entradas
    	GPIOB->MODER = 0x5555; // Habilitando pull-down

		GPIOC->MODER &= ~(GPIO_MODER_MODER0|GPIO_MODER_MODER1|GPIO_MODER_MODER2|GPIO_MODER_MODER3|GPIO_MODER_MODER4|GPIO_MODER_MODER5|GPIO_MODER_MODER6|GPIO_MODER_MODER7); // PC0a PC7 saidas e demais entrada
		GPIOC->MODER = 0x5555;

		GPIOA->MODER &= ~(GPIO_MODER_MODER8|GPIO_MODER_MODER9);




  /* Infinite loop */
  while (1)
  {





	 	  if(TIM10->SR & TIM_SR_UIF)
	 	  {

	 	  	TIM10->SR&=~TIM_SR_UIF;

	 	  	sensor[AGORA] = GPIOA->IDR & BOTAO1;

	 	  	if(sensor[AGORA] == 0 && sensor[ANTES] != 0)
	 	  	{
	 	  		if(conta<9)
	 	  		{
	 	  			conta++;
	 	  		}

	 	  	}


	 	  	sensor[ANTES] = sensor[AGORA];

	 	  }

	 	 if(TIM11->SR & TIM_SR_UIF)
	 	 {

	 		TIM11->SR&=~TIM_SR_UIF;

	 		 super_sensor[NOW] = GPIOA->IDR & BOTAO2;

	 		 if(super_sensor[NOW]==0 && super_sensor[BEFORE] != 0)
	 		 {

	 			 if(conta>0)
	 			 {
	 				conta--;
	 			 }
	 		 }

	 		 super_sensor[BEFORE] = super_sensor[NOW];

	 	 }


	 	 switch(conta)
	 	 {
	 	 case 9:
	 		 GPIOB->ODR = LED1;
	 		 break;
	 	 case 0:
	 		 GPIOB->ODR = LED2
			 break;
	 	 default:
	 		 GPIOB->ODR = 0;
	 		 break;
	 	 }





	 	  GPIOC->ODR = decod[conta];


	}
  }



