// INICIALIZAÇÕES E WHILE



/* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim10);
  HAL_TIM_Base_Start_IT(&htim11);


  HAL_UART_Receive_IT(&huart2, &data, 1);

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);







  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */



	 if(HAL_GPIO_ReadPin(BOTAU1_GPIO_Port, BOTAU1_Pin)==1||HAL_GPIO_ReadPin(BOTAU2_GPIO_Port, BOTAU2_Pin)==1)
	{
		HAL_TIM_Base_Start_IT(&htim10);
		if(HAL_GPIO_ReadPin(BOTAU2_GPIO_Port, BOTAU2_Pin)==1)
		{

			__HAL_TIM_PRESCALER(&htim10, 194.157);
		}
		else if(HAL_GPIO_ReadPin(BOTAU1_GPIO_Port, BOTAU1_Pin)==1)
		{
			__HAL_TIM_PRESCALER(&htim10, 205.701);
		}
	}
	else
	{
		HAL_TIM_Base_Stop_IT(&htim10);
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
	}


  }
  /* USER CODE END 3 */
}







//INTERRUPÇÃO



/* USER CODE BEGIN 4 */

enum{AGR=0,ANTES};
uint16_t conta;
uint16_t sensor[2];


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

	if(htim->Instance==TIM10)
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	}

}


/* USER CODE END 4 */

















